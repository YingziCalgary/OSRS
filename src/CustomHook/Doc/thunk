/**
 * Redux Thunk is a middleware for Redux, a popular state management library used in React and other 
 * JavaScript applications. It allows you to write asynchronous logic within your Redux actions. 
 * Here's what Redux Thunk does and why it's useful:

1. **Asynchronous Actions**: In a typical Redux setup, actions are synchronous and are meant for 
simple state changes. However, in real-world applications, you often need to perform asynchronous 
tasks like making API requests, fetching data, or handling timers. Redux Thunk extends Redux to 
handle such asynchronous actions.

2. **Action Creators**: In Redux, you have action creators, which are functions that return action 
objects. With Redux Thunk, action creators can return functions instead of plain action objects. 
These functions can contain asynchronous code.

3. **Dispatching Async Actions**: When you dispatch an action created by Redux Thunk, it intercepts 
the action and checks whether it's a function. If it's a function, Redux Thunk will invoke it, 
allowing you to perform async tasks.

4. **Access to Dispatch and State**: The function returned by Redux Thunk receives two arguments: 
`dispatch` and `getState`. This means you have access to the dispatch function to dispatch further 
actions and access to the current state.

Here's a basic example of how Redux Thunk works:

```javascript
// Normal action creator (returns an action object)
const increment = () => {
  return {
    type: 'INCREMENT',
  };
};

// Action creator using Redux Thunk (returns a function)
const incrementAsync = () => {
  return (dispatch) => {
    setTimeout(() => {
      dispatch(increment()); // Dispatch a normal action after a delay
    }, 1000);
  };
};
```

In this example, `incrementAsync` is an action creator that returns a function. This function, 
when dispatched, waits for a second before dispatching the `increment` action.

Redux Thunk is particularly useful when dealing with API requests, as you can make asynchronous
 calls to fetch data and update the state based on the results. It helps keep your application's 
 state management and side effects neatly organized within Redux.
 */